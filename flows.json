[{"id":"ae21f6e5218a2ca0","type":"tab","label":"UPLOAD VIDEO","disabled":false,"info":"","env":[]},{"id":"438142a71049fe66","type":"inject","z":"ae21f6e5218a2ca0","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":460,"y":160,"wires":[["5c50820408dd7a4d"]]},{"id":"5c50820408dd7a4d","type":"postgresql","z":"ae21f6e5218a2ca0","name":"DB","query":"SELECT * FROM videos;","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":650,"y":160,"wires":[["f98308a1a27540b5"]]},{"id":"f98308a1a27540b5","type":"debug","z":"ae21f6e5218a2ca0","name":"debug 4","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":840,"y":160,"wires":[]},{"id":"0680d1803aca2699","type":"http in","z":"ae21f6e5218a2ca0","name":"","url":"datavideo","method":"get","upload":false,"swaggerDoc":"","x":400,"y":320,"wires":[["71398a0b27e96704"]]},{"id":"71398a0b27e96704","type":"postgresql","z":"ae21f6e5218a2ca0","name":"DB","query":"SELECT * FROM videos;","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":650,"y":320,"wires":[["ed636d8bcf44e0e1"]]},{"id":"5759add96a9f6644","type":"inject","z":"ae21f6e5218a2ca0","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":460,"y":220,"wires":[["164ede5149d905f9"]]},{"id":"ed636d8bcf44e0e1","type":"http response","z":"ae21f6e5218a2ca0","name":"","statusCode":"","headers":{},"x":830,"y":320,"wires":[]},{"id":"164ede5149d905f9","type":"http request","z":"ae21f6e5218a2ca0","name":"","method":"GET","ret":"txt","paytoqs":"ignore","url":"http://localhost:1880/datavideo","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":670,"y":220,"wires":[["79b0a8bd9413d47f"]]},{"id":"79b0a8bd9413d47f","type":"debug","z":"ae21f6e5218a2ca0","name":"debug 5","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":840,"y":220,"wires":[]},{"id":"5259c062da0910fb","type":"http in","z":"ae21f6e5218a2ca0","name":"","url":"uploadvideo","method":"post","upload":true,"swaggerDoc":"","x":390,"y":420,"wires":[["d04428ec99e9a9c7"]]},{"id":"0b6baa8997e786e0","type":"postgresql","z":"ae21f6e5218a2ca0","name":"DB","query":"","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":870,"y":420,"wires":[["eead2ed1d443e62a"]]},{"id":"eead2ed1d443e62a","type":"http response","z":"ae21f6e5218a2ca0","name":"","statusCode":"","headers":{},"x":1030,"y":420,"wires":[]},{"id":"d04428ec99e9a9c7","type":"function","z":"ae21f6e5218a2ca0","name":"function 10","func":"const fs = global.get('fs');\nconst path = global.get('path');\n\nconst uploadsDir = 'C:/Users/mfgte/.node-red/uibuilder/videoupload/src/uploads'; \nconst MAX_FILE_SIZE = 50 * 1024 * 1024;\n\nif (!msg.req.files || msg.req.files.length === 0) {\n    msg.payload = \"No files uploaded\";\n    msg.statusCode = 400;\n    return [null, msg];\n}\n\nlet uploadedFiles = msg.req.files;\nlet fileNames = [];\nlet rejectedFiles = [];\n\nlet filePromises = uploadedFiles.map(uploadedFile => {\n    return new Promise((resolve, reject) => {\n        const fileName = uploadedFile.originalname;\n        const fileSize = uploadedFile.size;\n        const filePath = path.join(uploadsDir, fileName);\n\n        // File size validation\n        if (fileSize > MAX_FILE_SIZE) {\n            rejectedFiles.push(fileName);\n            console.log(`File ${fileName} is too large (over 5MB), skipping...`);\n            return resolve(null); \n        }\n\n        // Directory creation \n        if (!fs.existsSync(uploadsDir)) {\n            fs.mkdirSync(uploadsDir, { recursive: true });\n        }\n\n        // File saving\n        fs.writeFile(filePath, uploadedFile.buffer, (err) => {\n            if (err) {\n                console.error(\"Error saving file:\", err);\n                return reject(\"Error uploading file: \" + err.message); \n            }\n            fileNames.push(fileName);\n            resolve(fileName); \n        });\n    });\n});\n\nPromise.all(filePromises)\n    .then(() => {\n        // Database interaction (modify as needed)\n        const placeholders = fileNames.map((_, index) => `($${index + 1})`).join(', ');\n        msg.query = `INSERT INTO videos(name) VALUES ${placeholders}`;\n        msg.params = fileNames;\n\n        // Response handling\n        if (rejectedFiles.length > 0) {\n            msg.payload = `Uploaded files: ${fileNames.join(\", \")}. Rejected files (too large): ${rejectedFiles.join(\", \")}`;\n        } else {\n            msg.payload = `Uploaded files: ${fileNames.join(\", \")}`;\n        }\n        msg.statusCode = 200; \n        node.send([msg, null]); \n    })\n    .catch(error => {\n        msg.payload = \"Error during upload: \" + error; \n        msg.statusCode = 500;\n        node.send([null, msg]); \n    });\n\nreturn null; ","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":420,"wires":[["0b6baa8997e786e0"]]},{"id":"49b52e06ce78ca76","type":"http in","z":"ae21f6e5218a2ca0","name":"","url":"deletevideo/:id","method":"delete","upload":false,"swaggerDoc":"","x":380,"y":520,"wires":[["cbb66a3316b1709f"]]},{"id":"3c4b8d79f5eda852","type":"postgresql","z":"ae21f6e5218a2ca0","name":"DB","query":"","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":870,"y":520,"wires":[["ea23483d80a7557a"]]},{"id":"fedcb6782b458546","type":"http response","z":"ae21f6e5218a2ca0","name":"","statusCode":"","headers":{},"x":1430,"y":520,"wires":[]},{"id":"cbb66a3316b1709f","type":"function","z":"ae21f6e5218a2ca0","name":"function 11","func":"const id = msg.req.params.id;\nmsg.query = `DELETE FROM videos WHERE id = '${id}' RETURNING name;`; // Optimized query\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":520,"wires":[["3c4b8d79f5eda852"]]},{"id":"ea23483d80a7557a","type":"function","z":"ae21f6e5218a2ca0","name":"function 12","func":"const filename = msg.payload[0].name; \nmsg.filename = filename;\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1040,"y":520,"wires":[["56e0d0c8bfe21d44"]]},{"id":"56e0d0c8bfe21d44","type":"function","z":"ae21f6e5218a2ca0","name":"function 13","func":"const fs = global.get('fs');\nconst videoPath = `C:/Users/mfgte/.node-red/uibuilder/videoupload/src/uploads/${msg.filename}`;\n\nfs.unlink(videoPath, (err) => {\n    if (err) {\n        console.error('Error deleting video file:', err);\n        // Send an error response back to the client\n        msg.statusCode = 500; // Internal Server Error\n        msg.payload = { error: 'Failed to delete video file.' };\n        node.send(msg); // Send the error response\n    } else {\n        console.log('Video file deleted successfully!');\n        // Proceed with the success response (the existing HTTP Response node will handle this)\n        node.send(msg);\n    }\n});","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1240,"y":520,"wires":[["fedcb6782b458546"]]},{"id":"d3c8b55cbccf0e87","type":"http in","z":"ae21f6e5218a2ca0","name":"","url":"/video/:name","method":"get","upload":false,"swaggerDoc":"","x":430,"y":620,"wires":[["4093ec7f308b8f1f"]]},{"id":"4093ec7f308b8f1f","type":"function","z":"ae21f6e5218a2ca0","name":"Get Image Path","func":"const name = msg.req.params.name;\nmsg.query = `SELECT name FROM videos WHERE name = '${name}'`;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":680,"y":620,"wires":[["35526f368cc4b75c"]]},{"id":"35526f368cc4b75c","type":"postgresql","z":"ae21f6e5218a2ca0","name":"DB","query":"","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":870,"y":620,"wires":[["ee5e0a7a3be2fac3"]]},{"id":"ee5e0a7a3be2fac3","type":"function","z":"ae21f6e5218a2ca0","name":"Serve Image","func":"const fs = global.get('fs');\nconst path = global.get('path'); \nconst videoName = msg.payload[0].name;\nconst videoPath = `C:/Users/mfgte/.node-red/uibuilder/videoupload/src/uploads/${videoName}`;\n\nconst fileExtension = path.extname(videoName).toLowerCase();\n\nlet contentType = 'video/mp4';\nif (fileExtension === '.mov') { \n    contentType = 'video/quicktime'; \n} else if (fileExtension === '.wmv') {\n    contentType = 'video/x-ms-wmv'; \n} else if (fileExtension === '.avi') {\n    contentType = 'video/x-msvideo';\n}\n\nfs.readFile(videoPath, (err, data) => {\n    if (err) {\n        msg.statusCode = 404;\n        msg.payload = 'Video not found';\n        return node.send(msg);\n    }\n\n    msg.headers = { 'Content-Type': contentType };\n    msg.payload = data;\n    node.send(msg);\n});\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1050,"y":620,"wires":[["cf052a648fac596d"]]},{"id":"cf052a648fac596d","type":"http response","z":"ae21f6e5218a2ca0","name":"","statusCode":"","headers":{},"x":1230,"y":620,"wires":[]},{"id":"234afb8d2a83188a","type":"http in","z":"ae21f6e5218a2ca0","name":"","url":"/deleteallvideos","method":"delete","upload":false,"swaggerDoc":"","x":440,"y":720,"wires":[["a2a84e57825b5fd1"]]},{"id":"7dfc5523f49e0ed2","type":"postgresql","z":"ae21f6e5218a2ca0","name":"DB","query":"","postgreSQLConfig":"8ff09028acc3aecc","split":false,"rowsPerMsg":1,"outputs":1,"x":870,"y":720,"wires":[["2112476dede40248"]]},{"id":"3a4707c184019bc4","type":"http response","z":"ae21f6e5218a2ca0","name":"","statusCode":"","headers":{},"x":1430,"y":720,"wires":[]},{"id":"a2a84e57825b5fd1","type":"function","z":"ae21f6e5218a2ca0","name":"function 14","func":"const name = msg.req.params.name;\nmsg.query = `DELETE FROM videos RETURNING name`;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":720,"wires":[["7dfc5523f49e0ed2"]]},{"id":"2112476dede40248","type":"function","z":"ae21f6e5218a2ca0","name":"function 15","func":"const filename = msg.payload.map(item => item.name);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1040,"y":720,"wires":[["b941f3f7c3147015"]]},{"id":"b941f3f7c3147015","type":"function","z":"ae21f6e5218a2ca0","name":"function 16","func":"const fs = global.get('fs');\nconst filenames = msg.payload.map(item => item.name);\n\nconst deletePromises = filenames.map(filename => {\n    const videoPath = `C:/Users/mfgte/.node-red/uibuilder/videoupload/src/uploads/${filename}`;\n\n    return new Promise((resolve, reject) => {\n        fs.unlink(videoPath, (err) => {\n            if (err) {\n                reject({ filename, error: err });\n            } else {\n                resolve({ filename, message: 'Deleted successfully' });\n            }\n        });\n    });\n});\n\n// Wait for all deletions to complete\nreturn Promise.allSettled(deletePromises)\n    .then(results => {\n        // Collect information about all the deletions\n        const deletedFiles = results.filter(result => result.status === 'fulfilled').map(result => result.value);\n        const failedFiles = results.filter(result => result.status === 'rejected').map(result => result.reason);\n\n        if (failedFiles.length > 0) {\n            // If there were errors, return a partial success with the list of failed files\n            msg.statusCode = 500;\n            msg.payload = { message: 'Some files could not be deleted', deletedFiles, failedFiles };\n        } else {\n            // All files were deleted successfully\n            msg.statusCode = 200;\n            msg.payload = { message: 'All videos deleted successfully', deletedFiles };\n        }\n        return msg;\n    })\n    .catch(err => {\n        // Handle any unexpected errors\n        console.error('Unexpected error:', err);\n        msg.statusCode = 500;\n        msg.payload = { error: 'Unexpected error occurred during file deletion' };\n        return msg;\n    });\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1240,"y":720,"wires":[["3a4707c184019bc4"]]},{"id":"616fb86c53e328c9","type":"uibuilder","z":"ae21f6e5218a2ca0","name":"videoupload","topic":"","url":"videoupload","fwdInMessages":false,"allowScripts":false,"allowStyles":false,"copyIndex":true,"templateFolder":"blank","extTemplate":"","showfolder":false,"useSecurity":false,"sessionLength":432000,"tokenAutoExtend":false,"reload":false,"sourceFolder":"src","x":470,"y":60,"wires":[[],[]]},{"id":"8ff09028acc3aecc","type":"postgreSQLConfig","name":"","host":"localhost","hostFieldType":"str","port":"5432","portFieldType":"num","database":"postgres","databaseFieldType":"str","ssl":"false","sslFieldType":"bool","applicationName":"","applicationNameType":"str","max":"10","maxFieldType":"num","idle":"1000","idleFieldType":"num","connectionTimeout":"10000","connectionTimeoutFieldType":"num","user":"postgres","userFieldType":"str","password":"12345","passwordFieldType":"str"}]